apiVersion: apps/v1
kind: Deployment
metadata:
  name: darkbot-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darkbot-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: darkbot-app
        triggerRedeploy: "1"
    spec:
      volumes:
        - name: darkbot-persistent-storage
          persistentVolumeClaim:
            claimName: darkbot-{{ .Values.ENVIRONMENT }}-claim
      containers:
        - name: darkbot-ctr
          image: darkwind8/darkbot:v0.1.0
          imagePullPolicy: Always
          env:
            - name: SCRAPPY_PLAYER_URL
              value: "{{ .Values.SCRAPPY_PLAYER_URL }}"
            - name: SCRAPPY_BASE_URL
              value: "{{ .Values.SCRAPPY_BASE_URL }}"
            - name: DISCORDER_BOT_TOKEN
              value: "{{ .Values.DISCORDER_BOT_TOKEN }}"
            - name: CONFIGURATOR_DBNAME
              value: "{{ .Values.PRODUCTION_CONFIGURATOR_DBNAME }}"
          volumeMounts:
            - mountPath: "/code/data"
              name: darkbot-persistent-storage
          resources:
            requests:
              memory: "250Mi"
              cpu: "500m"
            limits:
              memory: "500Mi"
              cpu: "1000m"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: darkbot-{{ .Values.ENVIRONMENT }}-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: my-local-storage
  local:
    path: "/var/lib/darklab/{{ .Values.ENVIRONMENT }}/darkbot"
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - "{{ .Values.HOSTNAME }}"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: darkbot-{{ .Values.ENVIRONMENT }}-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: my-local-storage
  resources:
    requests:
      storage: 10Gi
